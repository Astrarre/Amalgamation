/*
 * Amalgamation
 * Copyright (C) 2021 Astrarre
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
buildscript {
    repositories {
        mavenCentral()

        maven {
            name = "FabricMC"
            url = uri("https://maven.fabricmc.net/")
        }

        maven {
            name = "MinecraftForge"
            url = uri("https://files.minecraftforge.net/maven")
        }
        maven {
            name = "HalfOf2"
            url = uri("https://storage.googleapis.com/devan-maven/")
        }
        maven {
            url = uri("https://jitpack.io")
        }

    }

    dependencies {
        classpath 'io.github.astrarre.amalgamation:gradle-plugin'
    }
}

apply plugin: 'java'
apply plugin: 'io.github.astrarre.amalgamation.minecraft'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://maven.fabricmc.net/' }
    maven { url 'https://files.minecraftforge.net/maven/' }
    maven {
        name = "HalfOf2"
        url = uri("https://storage.googleapis.com/devan-maven/")
    }
}

/**
 * dependencies {
 compile ag.merge {
 include('com.google.code.gson:gson:1.1', of('ver', '1.1'))
 include('com.google.code.gson:gson:2.8.6', of('ver', '2.8.6'))
 }
 }

 */

dependencies {
    implementation ag.map {
        mappings('net.fabricmc:yarn:1.16.5+build.4:mergedv2', 'official', 'named')
        remap ag.merge {
            compareInstructions = false
            include(ag.client('1.16.5'), of('side', 'client'))
            include(ag.server('1.16.5'), of('side', 'server'))
        }
    }
    implementation("net.fabricmc:fabric-loader:0.11.3")
    implementation("net.fabricmc:tiny-mappings-parser:0.2.2.14")
    implementation("net.fabricmc:sponge-mixin:0.9.2+mixin.0.8.2")
    implementation("net.fabricmc:tiny-remapper:0.3.0.70")
    implementation("net.fabricmc:access-widener:1.0.0")
    implementation("net.fabricmc:fabric-loader-sat4j:2.3.5.4")
    implementation("com.google.jimfs:jimfs:1.2-fabric")
    implementation("org.ow2.asm:asm:9.1")
    implementation("org.ow2.asm:asm-analysis:9.1")
    implementation("org.ow2.asm:asm-commons:9.1")
    implementation("org.ow2.asm:asm-tree:9.1")
    implementation("org.ow2.asm:asm-util:9.1")
    implementation ag.libraries('1.16.5')
}


task testDiff(type: JavaExec) {
    group = "tests"
    description = "Test Diff:tm:"
    classpath ag.splitClasspath({
        it.from sourceSets.main.runtimeClasspath
    }, 'client')
    main = "net.fabricmc.loader.launch.knot.KnotClient"
    def natives = ag.natives('1.16.5')
    systemProperty("fabric.development", true)
    systemProperty("java.library.path", natives)
    systemProperty("org.lwjgl.librarypath", natives)
    def assets = ag.assets('1.16.5')
    args("--assetIndex", assets.assetIndex, "--assetsDir", assets.assetsDir)
    workingDir("$rootDir/run")
}

tasks.testDiff.dependsOn(tasks.classes)

/*
task stripFabric_1_16(type: StripJar) {
    with jar
    archivesBaseName = 'fabric-1.16-dev'
    platform(['fabric', '1.16'])
}

task fabric_1_16(type: RemapJar) {
    with stripFabric_1_16
    archivesBaseName = 'fabric-1.16'
    classpath = configurations.compileClasspath
    mappings = amalgamation.createMappings(MappingTarget.INTERMEDIARY, '1.16')
}*/