import java.nio.file.Paths

/*
 * Amalgamation
 * Copyright (C) 2021 Astrarre
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
plugins {
    id 'java'
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'amalgamation-minecraft'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'amalgamation-minecraft'

    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://maven.fabricmc.net/' }
        maven { url 'https://files.minecraftforge.net/maven/' }
        maven {
            name = "HalfOf2"
            url = uri("https://storage.googleapis.com/devan-maven/")
        }
        maven {
            url "https://maven.shedaniel.me"
        }
    }
}

idea.module.downloadSources = true

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

def mc_vers = "1.17.1"
def mergedMappings = dependencies.create('net.fabricmc:yarn:1.17.1+build.61:mergedv2')

configurations {
    aaaaa {
    }
    implementation.extendsFrom(aaaaa)
}

dependencies {

    //aaaaa ag.mojmerged(mc_vers, mergedMappings)

    //aaaaa intermediaryMinecraft

    /*aaaaa ag.accessWidener("com.google.code.gson:gson:1.1") {
        accessWidener(files("$projectDir/src/main/resources/cope.aw"))
    }*/

    def mc
    //def fapi
    //def reiImpl
    //def reiApi
    ag.map {
        mappings('net.fabricmc:yarn:1.17.1+build.61:v2', 'intermediary', 'named')
        mc = inputLocal(ag.map {
            mappings(ag.intermediary(mc_vers))
            inputLocal(ag.mojmerged(mc_vers))
        })
        //reiApi = inputLocal("me.shedaniel:RoughlyEnoughItems-api-fabric:6.2.347")
        //reiImpl = inputLocal("me.shedaniel:RoughlyEnoughItems-fabric:6.2.347")
    }
    aaaaa ag.fernflower(mc) {
        optionalTask("decompileMinecraft")
        setJavadocs('net.fabricmc:yarn:1.17.1+build.61:v2', 'named')
    }
    //aaaaa reiImpl
    //aaaaa reiApi


    //aaaaa "com.google.code.gson:gson:1.1"*/
    //aaaaa ag.libraries(mc_vers)

    //aaaaa "com.google.code.gson:gson:1.1_l55CbtZK7l1UxJqVkggiVx0o1iFcXZEp0vsdXZGkDdA="
    //aaaaa "com.google.code.gson:gson:2.8.6_l55CbtZK7l1UxJqVkggiVx0o1iFcXZEp0vsdXZGkDdA="
   // aaaaa 'com.google.code.gson:gson:1.1_l55CbtZK7l1UxJqVkggiVx0o1iFcXZEp0vsdXZGkDdA='

    //aaaaa 'io.github.astrarre.amalgamation:transformed-notation:0.0.0'
    //aaaaa 'net.sf.jopt-simple:jopt-simple:6.0-alpha-3'

    //implementation('com.google.code.gson:gson:1.1')

    //implementation("net.fabricmc.fabric-api:fabric-api:0.41.0+1.17")

    //aaaaa ag.fabricLoader("0.11.7")
    //aaaaa ag.libraries(mc_vers)
}

task aaaaa(type: JavaExec) {
    group = null
    description = "Test Diff:tm:"
    classpath sourceSets.main.runtimeClasspath
    main = "net.fabricmc.loader.launch.knot.KnotClient"
    def natives = ag.natives(mc_vers)
    systemProperty("fabric.development", true)
    systemProperty("fabric.gameVersion", mc_vers)
    systemProperty("java.library.globalCache", natives)
    systemProperty("org.lwjgl.librarypath", natives)
    def assets = ag.assets(mc_vers)
    args("--assetIndex", assets.getAssetIndex(), "--assetsDir", assets.getAssetsDir())
    workingDir("$rootDir/run")
    dependsOn tasks.classes
}

ag.idea().java(aaaaa) {
    it.overrideClasspath(project, sourceSets.main)
    it.excludeDependency(tasks.classes)
}

/*
task stripFabric_1_16(type: StripJar) {
    with jar
    archivesBaseName = 'fabric-1.16-dev'
    platform(['fabric', '1.16'])
}
*/

task productionJar(type: RemapJar) {
    with jar
    archivesBaseName = 'fabric'
    classpath = configurations.compileClasspath
    remapAw()
    mappings(mergedMappings, 'named', 'intermediary')
}

task sourcesJar(type: RemapSourcesJar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    classpath = configurations.compileClasspath
    mappings(mergedMappings, 'named', 'intermediary')
}

task migrateMappings(type: MigrateSourcesTask) {
    inputDir = "${project.projectDir}/src/main/java"
    outputDir = "${project.projectDir}/src/main/remapped"
    classpath = configurations.compileClasspath
    mappings("net.fabricmc:yarn:1.17.1+build.61", "net.fabricmc:yarn:1.15.2+build.17")
}

task loadMcEnv {
    doLast {
        println(configurations.aaaaa.resolve())
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            ag.excludeConfiguration(it, configurations.aaaaa)
            ag.fixPom(it)
            artifact(jar) {
                builtBy jar
            }
        }
    }

    repositories {
        mavenLocal()
    }
}